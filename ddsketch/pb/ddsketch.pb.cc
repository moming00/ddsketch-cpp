// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddsketch.proto

#include "ddsketch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR DDSketch::DDSketch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapping_)*/nullptr
  , /*decltype(_impl_.positivevalues_)*/nullptr
  , /*decltype(_impl_.negativevalues_)*/nullptr
  , /*decltype(_impl_.zerocount_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.max_)*/0
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DDSketchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DDSketchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DDSketchDefaultTypeInternal() {}
  union {
    DDSketch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DDSketchDefaultTypeInternal _DDSketch_default_instance_;
PROTOBUF_CONSTEXPR IndexMapping::IndexMapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alpha_)*/0
  , /*decltype(_impl_.indexoffset_)*/0
  , /*decltype(_impl_.interpolation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexMappingDefaultTypeInternal() {}
  union {
    IndexMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexMappingDefaultTypeInternal _IndexMapping_default_instance_;
PROTOBUF_CONSTEXPR Store_BinCountsEntry_DoNotUse::Store_BinCountsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Store_BinCountsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Store_BinCountsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Store_BinCountsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Store_BinCountsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Store_BinCountsEntry_DoNotUseDefaultTypeInternal _Store_BinCountsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Store::Store(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bincounts_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contiguousbincounts_)*/{}
  , /*decltype(_impl_.contiguousbinindexoffset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreDefaultTypeInternal() {}
  union {
    Store _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreDefaultTypeInternal _Store_default_instance_;
static ::_pb::Metadata file_level_metadata_ddsketch_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ddsketch_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ddsketch_2eproto = nullptr;

const uint32_t TableStruct_ddsketch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DDSketch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.mapping_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.positivevalues_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.negativevalues_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.zerocount_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::DDSketch, _impl_.sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndexMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndexMapping, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::IndexMapping, _impl_.indexoffset_),
  PROTOBUF_FIELD_OFFSET(::IndexMapping, _impl_.interpolation_),
  PROTOBUF_FIELD_OFFSET(::Store_BinCountsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Store_BinCountsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Store_BinCountsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Store_BinCountsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Store, _impl_.bincounts_),
  PROTOBUF_FIELD_OFFSET(::Store, _impl_.contiguousbincounts_),
  PROTOBUF_FIELD_OFFSET(::Store, _impl_.contiguousbinindexoffset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DDSketch)},
  { 14, -1, -1, sizeof(::IndexMapping)},
  { 23, 31, -1, sizeof(::Store_BinCountsEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::Store)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_DDSketch_default_instance_._instance,
  &::_IndexMapping_default_instance_._instance,
  &::_Store_BinCountsEntry_DoNotUse_default_instance_._instance,
  &::_Store_default_instance_._instance,
};

const char descriptor_table_protodef_ddsketch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ddsketch.proto\"\263\001\n\010DDSketch\022\036\n\007mapping"
  "\030\001 \001(\0132\r.IndexMapping\022\036\n\016positiveValues\030"
  "\002 \001(\0132\006.Store\022\036\n\016negativeValues\030\003 \001(\0132\006."
  "Store\022\021\n\tzeroCount\030\004 \001(\001\022\r\n\005count\030\005 \001(\001\022"
  "\013\n\003min\030\006 \001(\001\022\013\n\003max\030\007 \001(\001\022\013\n\003sum\030\010 \001(\001\"\247"
  "\001\n\014IndexMapping\022\r\n\005alpha\030\001 \001(\001\022\023\n\013indexO"
  "ffset\030\002 \001(\001\0222\n\rinterpolation\030\003 \001(\0162\033.Ind"
  "exMapping.Interpolation\"\?\n\rInterpolation"
  "\022\010\n\004NONE\020\000\022\n\n\006LINEAR\020\001\022\r\n\tQUADRATIC\020\002\022\t\n"
  "\005CUBIC\020\003\"\246\001\n\005Store\022(\n\tbinCounts\030\001 \003(\0132\025."
  "Store.BinCountsEntry\022\037\n\023contiguousBinCou"
  "nts\030\002 \003(\001B\002\020\001\022 \n\030contiguousBinIndexOffse"
  "t\030\003 \001(\021\0320\n\016BinCountsEntry\022\013\n\003key\030\001 \001(\021\022\r"
  "\n\005value\030\002 \001(\001:\0028\001B7Z5github.com/moming00"
  "/ddsketch-cpp/ddsketch/pb/sketchpbb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_ddsketch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ddsketch_2eproto = {
    false, false, 602, descriptor_table_protodef_ddsketch_2eproto,
    "ddsketch.proto",
    &descriptor_table_ddsketch_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_ddsketch_2eproto::offsets,
    file_level_metadata_ddsketch_2eproto, file_level_enum_descriptors_ddsketch_2eproto,
    file_level_service_descriptors_ddsketch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ddsketch_2eproto_getter() {
  return &descriptor_table_ddsketch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ddsketch_2eproto(&descriptor_table_ddsketch_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexMapping_Interpolation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ddsketch_2eproto);
  return file_level_enum_descriptors_ddsketch_2eproto[0];
}
bool IndexMapping_Interpolation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IndexMapping_Interpolation IndexMapping::NONE;
constexpr IndexMapping_Interpolation IndexMapping::LINEAR;
constexpr IndexMapping_Interpolation IndexMapping::QUADRATIC;
constexpr IndexMapping_Interpolation IndexMapping::CUBIC;
constexpr IndexMapping_Interpolation IndexMapping::Interpolation_MIN;
constexpr IndexMapping_Interpolation IndexMapping::Interpolation_MAX;
constexpr int IndexMapping::Interpolation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DDSketch::_Internal {
 public:
  static const ::IndexMapping& mapping(const DDSketch* msg);
  static const ::Store& positivevalues(const DDSketch* msg);
  static const ::Store& negativevalues(const DDSketch* msg);
};

const ::IndexMapping&
DDSketch::_Internal::mapping(const DDSketch* msg) {
  return *msg->_impl_.mapping_;
}
const ::Store&
DDSketch::_Internal::positivevalues(const DDSketch* msg) {
  return *msg->_impl_.positivevalues_;
}
const ::Store&
DDSketch::_Internal::negativevalues(const DDSketch* msg) {
  return *msg->_impl_.negativevalues_;
}
DDSketch::DDSketch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DDSketch)
}
DDSketch::DDSketch(const DDSketch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DDSketch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapping_){nullptr}
    , decltype(_impl_.positivevalues_){nullptr}
    , decltype(_impl_.negativevalues_){nullptr}
    , decltype(_impl_.zerocount_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapping()) {
    _this->_impl_.mapping_ = new ::IndexMapping(*from._impl_.mapping_);
  }
  if (from._internal_has_positivevalues()) {
    _this->_impl_.positivevalues_ = new ::Store(*from._impl_.positivevalues_);
  }
  if (from._internal_has_negativevalues()) {
    _this->_impl_.negativevalues_ = new ::Store(*from._impl_.negativevalues_);
  }
  ::memcpy(&_impl_.zerocount_, &from._impl_.zerocount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sum_) -
    reinterpret_cast<char*>(&_impl_.zerocount_)) + sizeof(_impl_.sum_));
  // @@protoc_insertion_point(copy_constructor:DDSketch)
}

inline void DDSketch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapping_){nullptr}
    , decltype(_impl_.positivevalues_){nullptr}
    , decltype(_impl_.negativevalues_){nullptr}
    , decltype(_impl_.zerocount_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.min_){0}
    , decltype(_impl_.max_){0}
    , decltype(_impl_.sum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DDSketch::~DDSketch() {
  // @@protoc_insertion_point(destructor:DDSketch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DDSketch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mapping_;
  if (this != internal_default_instance()) delete _impl_.positivevalues_;
  if (this != internal_default_instance()) delete _impl_.negativevalues_;
}

void DDSketch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DDSketch::Clear() {
// @@protoc_insertion_point(message_clear_start:DDSketch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mapping_ != nullptr) {
    delete _impl_.mapping_;
  }
  _impl_.mapping_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.positivevalues_ != nullptr) {
    delete _impl_.positivevalues_;
  }
  _impl_.positivevalues_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.negativevalues_ != nullptr) {
    delete _impl_.negativevalues_;
  }
  _impl_.negativevalues_ = nullptr;
  ::memset(&_impl_.zerocount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sum_) -
      reinterpret_cast<char*>(&_impl_.zerocount_)) + sizeof(_impl_.sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DDSketch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IndexMapping mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Store positiveValues = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_positivevalues(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Store negativeValues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_negativevalues(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double zeroCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.zerocount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DDSketch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DDSketch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndexMapping mapping = 1;
  if (this->_internal_has_mapping()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mapping(this),
        _Internal::mapping(this).GetCachedSize(), target, stream);
  }

  // .Store positiveValues = 2;
  if (this->_internal_has_positivevalues()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::positivevalues(this),
        _Internal::positivevalues(this).GetCachedSize(), target, stream);
  }

  // .Store negativeValues = 3;
  if (this->_internal_has_negativevalues()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::negativevalues(this),
        _Internal::negativevalues(this).GetCachedSize(), target, stream);
  }

  // double zeroCount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zerocount = this->_internal_zerocount();
  uint64_t raw_zerocount;
  memcpy(&raw_zerocount, &tmp_zerocount, sizeof(tmp_zerocount));
  if (raw_zerocount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_zerocount(), target);
  }

  // double count = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_count = this->_internal_count();
  uint64_t raw_count;
  memcpy(&raw_count, &tmp_count, sizeof(tmp_count));
  if (raw_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_count(), target);
  }

  // double min = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_min(), target);
  }

  // double max = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_max(), target);
  }

  // double sum = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDSketch)
  return target;
}

size_t DDSketch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDSketch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndexMapping mapping = 1;
  if (this->_internal_has_mapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapping_);
  }

  // .Store positiveValues = 2;
  if (this->_internal_has_positivevalues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.positivevalues_);
  }

  // .Store negativeValues = 3;
  if (this->_internal_has_negativevalues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.negativevalues_);
  }

  // double zeroCount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zerocount = this->_internal_zerocount();
  uint64_t raw_zerocount;
  memcpy(&raw_zerocount, &tmp_zerocount, sizeof(tmp_zerocount));
  if (raw_zerocount != 0) {
    total_size += 1 + 8;
  }

  // double count = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_count = this->_internal_count();
  uint64_t raw_count;
  memcpy(&raw_count, &tmp_count, sizeof(tmp_count));
  if (raw_count != 0) {
    total_size += 1 + 8;
  }

  // double min = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 8;
  }

  // double max = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 8;
  }

  // double sum = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DDSketch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DDSketch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DDSketch::GetClassData() const { return &_class_data_; }


void DDSketch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DDSketch*>(&to_msg);
  auto& from = static_cast<const DDSketch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DDSketch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapping()) {
    _this->_internal_mutable_mapping()->::IndexMapping::MergeFrom(
        from._internal_mapping());
  }
  if (from._internal_has_positivevalues()) {
    _this->_internal_mutable_positivevalues()->::Store::MergeFrom(
        from._internal_positivevalues());
  }
  if (from._internal_has_negativevalues()) {
    _this->_internal_mutable_negativevalues()->::Store::MergeFrom(
        from._internal_negativevalues());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_zerocount = from._internal_zerocount();
  uint64_t raw_zerocount;
  memcpy(&raw_zerocount, &tmp_zerocount, sizeof(tmp_zerocount));
  if (raw_zerocount != 0) {
    _this->_internal_set_zerocount(from._internal_zerocount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_count = from._internal_count();
  uint64_t raw_count;
  memcpy(&raw_count, &tmp_count, sizeof(tmp_count));
  if (raw_count != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DDSketch::CopyFrom(const DDSketch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDSketch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDSketch::IsInitialized() const {
  return true;
}

void DDSketch::InternalSwap(DDSketch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DDSketch, _impl_.sum_)
      + sizeof(DDSketch::_impl_.sum_)
      - PROTOBUF_FIELD_OFFSET(DDSketch, _impl_.mapping_)>(
          reinterpret_cast<char*>(&_impl_.mapping_),
          reinterpret_cast<char*>(&other->_impl_.mapping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DDSketch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddsketch_2eproto_getter, &descriptor_table_ddsketch_2eproto_once,
      file_level_metadata_ddsketch_2eproto[0]);
}

// ===================================================================

class IndexMapping::_Internal {
 public:
};

IndexMapping::IndexMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IndexMapping)
}
IndexMapping::IndexMapping(const IndexMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexMapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alpha_){}
    , decltype(_impl_.indexoffset_){}
    , decltype(_impl_.interpolation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alpha_, &from._impl_.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interpolation_) -
    reinterpret_cast<char*>(&_impl_.alpha_)) + sizeof(_impl_.interpolation_));
  // @@protoc_insertion_point(copy_constructor:IndexMapping)
}

inline void IndexMapping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alpha_){0}
    , decltype(_impl_.indexoffset_){0}
    , decltype(_impl_.interpolation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexMapping::~IndexMapping() {
  // @@protoc_insertion_point(destructor:IndexMapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexMapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:IndexMapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.interpolation_) -
      reinterpret_cast<char*>(&_impl_.alpha_)) + sizeof(_impl_.interpolation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexMapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double indexOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.indexoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .IndexMapping.Interpolation interpolation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interpolation(static_cast<::IndexMapping_Interpolation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexMapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndexMapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double alpha = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alpha = this->_internal_alpha();
  uint64_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_alpha(), target);
  }

  // double indexOffset = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_indexoffset = this->_internal_indexoffset();
  uint64_t raw_indexoffset;
  memcpy(&raw_indexoffset, &tmp_indexoffset, sizeof(tmp_indexoffset));
  if (raw_indexoffset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_indexoffset(), target);
  }

  // .IndexMapping.Interpolation interpolation = 3;
  if (this->_internal_interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndexMapping)
  return target;
}

size_t IndexMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndexMapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double alpha = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alpha = this->_internal_alpha();
  uint64_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    total_size += 1 + 8;
  }

  // double indexOffset = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_indexoffset = this->_internal_indexoffset();
  uint64_t raw_indexoffset;
  memcpy(&raw_indexoffset, &tmp_indexoffset, sizeof(tmp_indexoffset));
  if (raw_indexoffset != 0) {
    total_size += 1 + 8;
  }

  // .IndexMapping.Interpolation interpolation = 3;
  if (this->_internal_interpolation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_interpolation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexMapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexMapping::GetClassData() const { return &_class_data_; }


void IndexMapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexMapping*>(&to_msg);
  auto& from = static_cast<const IndexMapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IndexMapping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alpha = from._internal_alpha();
  uint64_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    _this->_internal_set_alpha(from._internal_alpha());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_indexoffset = from._internal_indexoffset();
  uint64_t raw_indexoffset;
  memcpy(&raw_indexoffset, &tmp_indexoffset, sizeof(tmp_indexoffset));
  if (raw_indexoffset != 0) {
    _this->_internal_set_indexoffset(from._internal_indexoffset());
  }
  if (from._internal_interpolation() != 0) {
    _this->_internal_set_interpolation(from._internal_interpolation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexMapping::CopyFrom(const IndexMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndexMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexMapping::IsInitialized() const {
  return true;
}

void IndexMapping::InternalSwap(IndexMapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexMapping, _impl_.interpolation_)
      + sizeof(IndexMapping::_impl_.interpolation_)
      - PROTOBUF_FIELD_OFFSET(IndexMapping, _impl_.alpha_)>(
          reinterpret_cast<char*>(&_impl_.alpha_),
          reinterpret_cast<char*>(&other->_impl_.alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddsketch_2eproto_getter, &descriptor_table_ddsketch_2eproto_once,
      file_level_metadata_ddsketch_2eproto[1]);
}

// ===================================================================

Store_BinCountsEntry_DoNotUse::Store_BinCountsEntry_DoNotUse() {}
Store_BinCountsEntry_DoNotUse::Store_BinCountsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Store_BinCountsEntry_DoNotUse::MergeFrom(const Store_BinCountsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Store_BinCountsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddsketch_2eproto_getter, &descriptor_table_ddsketch_2eproto_once,
      file_level_metadata_ddsketch_2eproto[2]);
}

// ===================================================================

class Store::_Internal {
 public:
};

Store::Store(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Store::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:Store)
}
Store::Store(const Store& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Store* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.bincounts_)*/{}
    , decltype(_impl_.contiguousbincounts_){from._impl_.contiguousbincounts_}
    , decltype(_impl_.contiguousbinindexoffset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bincounts_.MergeFrom(from._impl_.bincounts_);
  _this->_impl_.contiguousbinindexoffset_ = from._impl_.contiguousbinindexoffset_;
  // @@protoc_insertion_point(copy_constructor:Store)
}

inline void Store::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.bincounts_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.contiguousbincounts_){arena}
    , decltype(_impl_.contiguousbinindexoffset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Store::~Store() {
  // @@protoc_insertion_point(destructor:Store)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Store::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bincounts_.Destruct();
  _impl_.bincounts_.~MapField();
  _impl_.contiguousbincounts_.~RepeatedField();
}

void Store::ArenaDtor(void* object) {
  Store* _this = reinterpret_cast< Store* >(object);
  _this->_impl_.bincounts_.Destruct();
}
void Store::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Store::Clear() {
// @@protoc_insertion_point(message_clear_start:Store)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bincounts_.Clear();
  _impl_.contiguousbincounts_.Clear();
  _impl_.contiguousbinindexoffset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Store::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<sint32, double> binCounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.bincounts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double contiguousBinCounts = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_contiguousbincounts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_contiguousbincounts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint32 contiguousBinIndexOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.contiguousbinindexoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Store::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Store)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<sint32, double> binCounts = 1;
  if (!this->_internal_bincounts().empty()) {
    using MapType = ::_pb::Map<int32_t, double>;
    using WireHelper = Store_BinCountsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_bincounts();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated double contiguousBinCounts = 2 [packed = true];
  if (this->_internal_contiguousbincounts_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_contiguousbincounts(), target);
  }

  // sint32 contiguousBinIndexOffset = 3;
  if (this->_internal_contiguousbinindexoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_contiguousbinindexoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Store)
  return target;
}

size_t Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Store)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<sint32, double> binCounts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bincounts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >::const_iterator
      it = this->_internal_bincounts().begin();
      it != this->_internal_bincounts().end(); ++it) {
    total_size += Store_BinCountsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated double contiguousBinCounts = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contiguousbincounts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // sint32 contiguousBinIndexOffset = 3;
  if (this->_internal_contiguousbinindexoffset() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_contiguousbinindexoffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Store::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Store::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Store::GetClassData() const { return &_class_data_; }


void Store::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Store*>(&to_msg);
  auto& from = static_cast<const Store&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Store)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bincounts_.MergeFrom(from._impl_.bincounts_);
  _this->_impl_.contiguousbincounts_.MergeFrom(from._impl_.contiguousbincounts_);
  if (from._internal_contiguousbinindexoffset() != 0) {
    _this->_internal_set_contiguousbinindexoffset(from._internal_contiguousbinindexoffset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Store::CopyFrom(const Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store::IsInitialized() const {
  return true;
}

void Store::InternalSwap(Store* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bincounts_.InternalSwap(&other->_impl_.bincounts_);
  _impl_.contiguousbincounts_.InternalSwap(&other->_impl_.contiguousbincounts_);
  swap(_impl_.contiguousbinindexoffset_, other->_impl_.contiguousbinindexoffset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Store::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddsketch_2eproto_getter, &descriptor_table_ddsketch_2eproto_once,
      file_level_metadata_ddsketch_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DDSketch*
Arena::CreateMaybeMessage< ::DDSketch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DDSketch >(arena);
}
template<> PROTOBUF_NOINLINE ::IndexMapping*
Arena::CreateMaybeMessage< ::IndexMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndexMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::Store_BinCountsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::Store_BinCountsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Store_BinCountsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Store*
Arena::CreateMaybeMessage< ::Store >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Store >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
