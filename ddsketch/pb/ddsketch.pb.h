// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddsketch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ddsketch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ddsketch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ddsketch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ddsketch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddsketch_2eproto;
class DDSketch;
struct DDSketchDefaultTypeInternal;
extern DDSketchDefaultTypeInternal _DDSketch_default_instance_;
class IndexMapping;
struct IndexMappingDefaultTypeInternal;
extern IndexMappingDefaultTypeInternal _IndexMapping_default_instance_;
class Store;
struct StoreDefaultTypeInternal;
extern StoreDefaultTypeInternal _Store_default_instance_;
class Store_BinCountsEntry_DoNotUse;
struct Store_BinCountsEntry_DoNotUseDefaultTypeInternal;
extern Store_BinCountsEntry_DoNotUseDefaultTypeInternal _Store_BinCountsEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DDSketch* Arena::CreateMaybeMessage<::DDSketch>(Arena*);
template<> ::IndexMapping* Arena::CreateMaybeMessage<::IndexMapping>(Arena*);
template<> ::Store* Arena::CreateMaybeMessage<::Store>(Arena*);
template<> ::Store_BinCountsEntry_DoNotUse* Arena::CreateMaybeMessage<::Store_BinCountsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum IndexMapping_Interpolation : int {
  IndexMapping_Interpolation_NONE = 0,
  IndexMapping_Interpolation_LINEAR = 1,
  IndexMapping_Interpolation_QUADRATIC = 2,
  IndexMapping_Interpolation_CUBIC = 3,
  IndexMapping_Interpolation_IndexMapping_Interpolation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IndexMapping_Interpolation_IndexMapping_Interpolation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IndexMapping_Interpolation_IsValid(int value);
constexpr IndexMapping_Interpolation IndexMapping_Interpolation_Interpolation_MIN = IndexMapping_Interpolation_NONE;
constexpr IndexMapping_Interpolation IndexMapping_Interpolation_Interpolation_MAX = IndexMapping_Interpolation_CUBIC;
constexpr int IndexMapping_Interpolation_Interpolation_ARRAYSIZE = IndexMapping_Interpolation_Interpolation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexMapping_Interpolation_descriptor();
template<typename T>
inline const std::string& IndexMapping_Interpolation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexMapping_Interpolation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexMapping_Interpolation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexMapping_Interpolation_descriptor(), enum_t_value);
}
inline bool IndexMapping_Interpolation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IndexMapping_Interpolation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexMapping_Interpolation>(
    IndexMapping_Interpolation_descriptor(), name, value);
}
// ===================================================================

class DDSketch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DDSketch) */ {
 public:
  inline DDSketch() : DDSketch(nullptr) {}
  ~DDSketch() override;
  explicit PROTOBUF_CONSTEXPR DDSketch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DDSketch(const DDSketch& from);
  DDSketch(DDSketch&& from) noexcept
    : DDSketch() {
    *this = ::std::move(from);
  }

  inline DDSketch& operator=(const DDSketch& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDSketch& operator=(DDSketch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DDSketch& default_instance() {
    return *internal_default_instance();
  }
  static inline const DDSketch* internal_default_instance() {
    return reinterpret_cast<const DDSketch*>(
               &_DDSketch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DDSketch& a, DDSketch& b) {
    a.Swap(&b);
  }
  inline void Swap(DDSketch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDSketch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DDSketch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DDSketch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DDSketch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DDSketch& from) {
    DDSketch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDSketch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DDSketch";
  }
  protected:
  explicit DDSketch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
    kPositiveValuesFieldNumber = 2,
    kNegativeValuesFieldNumber = 3,
    kZeroCountFieldNumber = 4,
    kCountFieldNumber = 5,
    kMinFieldNumber = 6,
    kMaxFieldNumber = 7,
    kSumFieldNumber = 8,
  };
  // .IndexMapping mapping = 1;
  bool has_mapping() const;
  private:
  bool _internal_has_mapping() const;
  public:
  void clear_mapping();
  const ::IndexMapping& mapping() const;
  PROTOBUF_NODISCARD ::IndexMapping* release_mapping();
  ::IndexMapping* mutable_mapping();
  void set_allocated_mapping(::IndexMapping* mapping);
  private:
  const ::IndexMapping& _internal_mapping() const;
  ::IndexMapping* _internal_mutable_mapping();
  public:
  void unsafe_arena_set_allocated_mapping(
      ::IndexMapping* mapping);
  ::IndexMapping* unsafe_arena_release_mapping();

  // .Store positiveValues = 2;
  bool has_positivevalues() const;
  private:
  bool _internal_has_positivevalues() const;
  public:
  void clear_positivevalues();
  const ::Store& positivevalues() const;
  PROTOBUF_NODISCARD ::Store* release_positivevalues();
  ::Store* mutable_positivevalues();
  void set_allocated_positivevalues(::Store* positivevalues);
  private:
  const ::Store& _internal_positivevalues() const;
  ::Store* _internal_mutable_positivevalues();
  public:
  void unsafe_arena_set_allocated_positivevalues(
      ::Store* positivevalues);
  ::Store* unsafe_arena_release_positivevalues();

  // .Store negativeValues = 3;
  bool has_negativevalues() const;
  private:
  bool _internal_has_negativevalues() const;
  public:
  void clear_negativevalues();
  const ::Store& negativevalues() const;
  PROTOBUF_NODISCARD ::Store* release_negativevalues();
  ::Store* mutable_negativevalues();
  void set_allocated_negativevalues(::Store* negativevalues);
  private:
  const ::Store& _internal_negativevalues() const;
  ::Store* _internal_mutable_negativevalues();
  public:
  void unsafe_arena_set_allocated_negativevalues(
      ::Store* negativevalues);
  ::Store* unsafe_arena_release_negativevalues();

  // double zeroCount = 4;
  void clear_zerocount();
  double zerocount() const;
  void set_zerocount(double value);
  private:
  double _internal_zerocount() const;
  void _internal_set_zerocount(double value);
  public:

  // double count = 5;
  void clear_count();
  double count() const;
  void set_count(double value);
  private:
  double _internal_count() const;
  void _internal_set_count(double value);
  public:

  // double min = 6;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 7;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // double sum = 8;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // @@protoc_insertion_point(class_scope:DDSketch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::IndexMapping* mapping_;
    ::Store* positivevalues_;
    ::Store* negativevalues_;
    double zerocount_;
    double count_;
    double min_;
    double max_;
    double sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddsketch_2eproto;
};
// -------------------------------------------------------------------

class IndexMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndexMapping) */ {
 public:
  inline IndexMapping() : IndexMapping(nullptr) {}
  ~IndexMapping() override;
  explicit PROTOBUF_CONSTEXPR IndexMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexMapping(const IndexMapping& from);
  IndexMapping(IndexMapping&& from) noexcept
    : IndexMapping() {
    *this = ::std::move(from);
  }

  inline IndexMapping& operator=(const IndexMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexMapping& operator=(IndexMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexMapping* internal_default_instance() {
    return reinterpret_cast<const IndexMapping*>(
               &_IndexMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexMapping& a, IndexMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexMapping& from) {
    IndexMapping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndexMapping";
  }
  protected:
  explicit IndexMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IndexMapping_Interpolation Interpolation;
  static constexpr Interpolation NONE =
    IndexMapping_Interpolation_NONE;
  static constexpr Interpolation LINEAR =
    IndexMapping_Interpolation_LINEAR;
  static constexpr Interpolation QUADRATIC =
    IndexMapping_Interpolation_QUADRATIC;
  static constexpr Interpolation CUBIC =
    IndexMapping_Interpolation_CUBIC;
  static inline bool Interpolation_IsValid(int value) {
    return IndexMapping_Interpolation_IsValid(value);
  }
  static constexpr Interpolation Interpolation_MIN =
    IndexMapping_Interpolation_Interpolation_MIN;
  static constexpr Interpolation Interpolation_MAX =
    IndexMapping_Interpolation_Interpolation_MAX;
  static constexpr int Interpolation_ARRAYSIZE =
    IndexMapping_Interpolation_Interpolation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Interpolation_descriptor() {
    return IndexMapping_Interpolation_descriptor();
  }
  template<typename T>
  static inline const std::string& Interpolation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Interpolation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Interpolation_Name.");
    return IndexMapping_Interpolation_Name(enum_t_value);
  }
  static inline bool Interpolation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Interpolation* value) {
    return IndexMapping_Interpolation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kIndexOffsetFieldNumber = 2,
    kInterpolationFieldNumber = 3,
  };
  // double alpha = 1;
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);
  private:
  double _internal_alpha() const;
  void _internal_set_alpha(double value);
  public:

  // double indexOffset = 2;
  void clear_indexoffset();
  double indexoffset() const;
  void set_indexoffset(double value);
  private:
  double _internal_indexoffset() const;
  void _internal_set_indexoffset(double value);
  public:

  // .IndexMapping.Interpolation interpolation = 3;
  void clear_interpolation();
  ::IndexMapping_Interpolation interpolation() const;
  void set_interpolation(::IndexMapping_Interpolation value);
  private:
  ::IndexMapping_Interpolation _internal_interpolation() const;
  void _internal_set_interpolation(::IndexMapping_Interpolation value);
  public:

  // @@protoc_insertion_point(class_scope:IndexMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double alpha_;
    double indexoffset_;
    int interpolation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddsketch_2eproto;
};
// -------------------------------------------------------------------

class Store_BinCountsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Store_BinCountsEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Store_BinCountsEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  Store_BinCountsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Store_BinCountsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Store_BinCountsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Store_BinCountsEntry_DoNotUse& other);
  static const Store_BinCountsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Store_BinCountsEntry_DoNotUse*>(&_Store_BinCountsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ddsketch_2eproto;
};

// -------------------------------------------------------------------

class Store final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Store) */ {
 public:
  inline Store() : Store(nullptr) {}
  ~Store() override;
  explicit PROTOBUF_CONSTEXPR Store(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Store(const Store& from);
  Store(Store&& from) noexcept
    : Store() {
    *this = ::std::move(from);
  }

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }
  inline Store& operator=(Store&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Store& default_instance() {
    return *internal_default_instance();
  }
  static inline const Store* internal_default_instance() {
    return reinterpret_cast<const Store*>(
               &_Store_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Store& a, Store& b) {
    a.Swap(&b);
  }
  inline void Swap(Store* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Store* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Store* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Store>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Store& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Store& from) {
    Store::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Store* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Store";
  }
  protected:
  explicit Store(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBinCountsFieldNumber = 1,
    kContiguousBinCountsFieldNumber = 2,
    kContiguousBinIndexOffsetFieldNumber = 3,
  };
  // map<sint32, double> binCounts = 1;
  int bincounts_size() const;
  private:
  int _internal_bincounts_size() const;
  public:
  void clear_bincounts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      _internal_bincounts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      _internal_mutable_bincounts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      bincounts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      mutable_bincounts();

  // repeated double contiguousBinCounts = 2 [packed = true];
  int contiguousbincounts_size() const;
  private:
  int _internal_contiguousbincounts_size() const;
  public:
  void clear_contiguousbincounts();
  private:
  double _internal_contiguousbincounts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_contiguousbincounts() const;
  void _internal_add_contiguousbincounts(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_contiguousbincounts();
  public:
  double contiguousbincounts(int index) const;
  void set_contiguousbincounts(int index, double value);
  void add_contiguousbincounts(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      contiguousbincounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_contiguousbincounts();

  // sint32 contiguousBinIndexOffset = 3;
  void clear_contiguousbinindexoffset();
  int32_t contiguousbinindexoffset() const;
  void set_contiguousbinindexoffset(int32_t value);
  private:
  int32_t _internal_contiguousbinindexoffset() const;
  void _internal_set_contiguousbinindexoffset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Store)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Store_BinCountsEntry_DoNotUse,
        int32_t, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> bincounts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > contiguousbincounts_;
    int32_t contiguousbinindexoffset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddsketch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DDSketch

// .IndexMapping mapping = 1;
inline bool DDSketch::_internal_has_mapping() const {
  return this != internal_default_instance() && _impl_.mapping_ != nullptr;
}
inline bool DDSketch::has_mapping() const {
  return _internal_has_mapping();
}
inline void DDSketch::clear_mapping() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapping_ != nullptr) {
    delete _impl_.mapping_;
  }
  _impl_.mapping_ = nullptr;
}
inline const ::IndexMapping& DDSketch::_internal_mapping() const {
  const ::IndexMapping* p = _impl_.mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndexMapping&>(
      ::_IndexMapping_default_instance_);
}
inline const ::IndexMapping& DDSketch::mapping() const {
  // @@protoc_insertion_point(field_get:DDSketch.mapping)
  return _internal_mapping();
}
inline void DDSketch::unsafe_arena_set_allocated_mapping(
    ::IndexMapping* mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapping_);
  }
  _impl_.mapping_ = mapping;
  if (mapping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DDSketch.mapping)
}
inline ::IndexMapping* DDSketch::release_mapping() {
  
  ::IndexMapping* temp = _impl_.mapping_;
  _impl_.mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IndexMapping* DDSketch::unsafe_arena_release_mapping() {
  // @@protoc_insertion_point(field_release:DDSketch.mapping)
  
  ::IndexMapping* temp = _impl_.mapping_;
  _impl_.mapping_ = nullptr;
  return temp;
}
inline ::IndexMapping* DDSketch::_internal_mutable_mapping() {
  
  if (_impl_.mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndexMapping>(GetArenaForAllocation());
    _impl_.mapping_ = p;
  }
  return _impl_.mapping_;
}
inline ::IndexMapping* DDSketch::mutable_mapping() {
  ::IndexMapping* _msg = _internal_mutable_mapping();
  // @@protoc_insertion_point(field_mutable:DDSketch.mapping)
  return _msg;
}
inline void DDSketch::set_allocated_mapping(::IndexMapping* mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mapping_;
  }
  if (mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mapping);
    if (message_arena != submessage_arena) {
      mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapping, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapping_ = mapping;
  // @@protoc_insertion_point(field_set_allocated:DDSketch.mapping)
}

// .Store positiveValues = 2;
inline bool DDSketch::_internal_has_positivevalues() const {
  return this != internal_default_instance() && _impl_.positivevalues_ != nullptr;
}
inline bool DDSketch::has_positivevalues() const {
  return _internal_has_positivevalues();
}
inline void DDSketch::clear_positivevalues() {
  if (GetArenaForAllocation() == nullptr && _impl_.positivevalues_ != nullptr) {
    delete _impl_.positivevalues_;
  }
  _impl_.positivevalues_ = nullptr;
}
inline const ::Store& DDSketch::_internal_positivevalues() const {
  const ::Store* p = _impl_.positivevalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::Store&>(
      ::_Store_default_instance_);
}
inline const ::Store& DDSketch::positivevalues() const {
  // @@protoc_insertion_point(field_get:DDSketch.positiveValues)
  return _internal_positivevalues();
}
inline void DDSketch::unsafe_arena_set_allocated_positivevalues(
    ::Store* positivevalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.positivevalues_);
  }
  _impl_.positivevalues_ = positivevalues;
  if (positivevalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DDSketch.positiveValues)
}
inline ::Store* DDSketch::release_positivevalues() {
  
  ::Store* temp = _impl_.positivevalues_;
  _impl_.positivevalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Store* DDSketch::unsafe_arena_release_positivevalues() {
  // @@protoc_insertion_point(field_release:DDSketch.positiveValues)
  
  ::Store* temp = _impl_.positivevalues_;
  _impl_.positivevalues_ = nullptr;
  return temp;
}
inline ::Store* DDSketch::_internal_mutable_positivevalues() {
  
  if (_impl_.positivevalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::Store>(GetArenaForAllocation());
    _impl_.positivevalues_ = p;
  }
  return _impl_.positivevalues_;
}
inline ::Store* DDSketch::mutable_positivevalues() {
  ::Store* _msg = _internal_mutable_positivevalues();
  // @@protoc_insertion_point(field_mutable:DDSketch.positiveValues)
  return _msg;
}
inline void DDSketch::set_allocated_positivevalues(::Store* positivevalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.positivevalues_;
  }
  if (positivevalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(positivevalues);
    if (message_arena != submessage_arena) {
      positivevalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positivevalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.positivevalues_ = positivevalues;
  // @@protoc_insertion_point(field_set_allocated:DDSketch.positiveValues)
}

// .Store negativeValues = 3;
inline bool DDSketch::_internal_has_negativevalues() const {
  return this != internal_default_instance() && _impl_.negativevalues_ != nullptr;
}
inline bool DDSketch::has_negativevalues() const {
  return _internal_has_negativevalues();
}
inline void DDSketch::clear_negativevalues() {
  if (GetArenaForAllocation() == nullptr && _impl_.negativevalues_ != nullptr) {
    delete _impl_.negativevalues_;
  }
  _impl_.negativevalues_ = nullptr;
}
inline const ::Store& DDSketch::_internal_negativevalues() const {
  const ::Store* p = _impl_.negativevalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::Store&>(
      ::_Store_default_instance_);
}
inline const ::Store& DDSketch::negativevalues() const {
  // @@protoc_insertion_point(field_get:DDSketch.negativeValues)
  return _internal_negativevalues();
}
inline void DDSketch::unsafe_arena_set_allocated_negativevalues(
    ::Store* negativevalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.negativevalues_);
  }
  _impl_.negativevalues_ = negativevalues;
  if (negativevalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DDSketch.negativeValues)
}
inline ::Store* DDSketch::release_negativevalues() {
  
  ::Store* temp = _impl_.negativevalues_;
  _impl_.negativevalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Store* DDSketch::unsafe_arena_release_negativevalues() {
  // @@protoc_insertion_point(field_release:DDSketch.negativeValues)
  
  ::Store* temp = _impl_.negativevalues_;
  _impl_.negativevalues_ = nullptr;
  return temp;
}
inline ::Store* DDSketch::_internal_mutable_negativevalues() {
  
  if (_impl_.negativevalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::Store>(GetArenaForAllocation());
    _impl_.negativevalues_ = p;
  }
  return _impl_.negativevalues_;
}
inline ::Store* DDSketch::mutable_negativevalues() {
  ::Store* _msg = _internal_mutable_negativevalues();
  // @@protoc_insertion_point(field_mutable:DDSketch.negativeValues)
  return _msg;
}
inline void DDSketch::set_allocated_negativevalues(::Store* negativevalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.negativevalues_;
  }
  if (negativevalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(negativevalues);
    if (message_arena != submessage_arena) {
      negativevalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negativevalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.negativevalues_ = negativevalues;
  // @@protoc_insertion_point(field_set_allocated:DDSketch.negativeValues)
}

// double zeroCount = 4;
inline void DDSketch::clear_zerocount() {
  _impl_.zerocount_ = 0;
}
inline double DDSketch::_internal_zerocount() const {
  return _impl_.zerocount_;
}
inline double DDSketch::zerocount() const {
  // @@protoc_insertion_point(field_get:DDSketch.zeroCount)
  return _internal_zerocount();
}
inline void DDSketch::_internal_set_zerocount(double value) {
  
  _impl_.zerocount_ = value;
}
inline void DDSketch::set_zerocount(double value) {
  _internal_set_zerocount(value);
  // @@protoc_insertion_point(field_set:DDSketch.zeroCount)
}

// double count = 5;
inline void DDSketch::clear_count() {
  _impl_.count_ = 0;
}
inline double DDSketch::_internal_count() const {
  return _impl_.count_;
}
inline double DDSketch::count() const {
  // @@protoc_insertion_point(field_get:DDSketch.count)
  return _internal_count();
}
inline void DDSketch::_internal_set_count(double value) {
  
  _impl_.count_ = value;
}
inline void DDSketch::set_count(double value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:DDSketch.count)
}

// double min = 6;
inline void DDSketch::clear_min() {
  _impl_.min_ = 0;
}
inline double DDSketch::_internal_min() const {
  return _impl_.min_;
}
inline double DDSketch::min() const {
  // @@protoc_insertion_point(field_get:DDSketch.min)
  return _internal_min();
}
inline void DDSketch::_internal_set_min(double value) {
  
  _impl_.min_ = value;
}
inline void DDSketch::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:DDSketch.min)
}

// double max = 7;
inline void DDSketch::clear_max() {
  _impl_.max_ = 0;
}
inline double DDSketch::_internal_max() const {
  return _impl_.max_;
}
inline double DDSketch::max() const {
  // @@protoc_insertion_point(field_get:DDSketch.max)
  return _internal_max();
}
inline void DDSketch::_internal_set_max(double value) {
  
  _impl_.max_ = value;
}
inline void DDSketch::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:DDSketch.max)
}

// double sum = 8;
inline void DDSketch::clear_sum() {
  _impl_.sum_ = 0;
}
inline double DDSketch::_internal_sum() const {
  return _impl_.sum_;
}
inline double DDSketch::sum() const {
  // @@protoc_insertion_point(field_get:DDSketch.sum)
  return _internal_sum();
}
inline void DDSketch::_internal_set_sum(double value) {
  
  _impl_.sum_ = value;
}
inline void DDSketch::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:DDSketch.sum)
}

// -------------------------------------------------------------------

// IndexMapping

// double alpha = 1;
inline void IndexMapping::clear_alpha() {
  _impl_.alpha_ = 0;
}
inline double IndexMapping::_internal_alpha() const {
  return _impl_.alpha_;
}
inline double IndexMapping::alpha() const {
  // @@protoc_insertion_point(field_get:IndexMapping.alpha)
  return _internal_alpha();
}
inline void IndexMapping::_internal_set_alpha(double value) {
  
  _impl_.alpha_ = value;
}
inline void IndexMapping::set_alpha(double value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:IndexMapping.alpha)
}

// double indexOffset = 2;
inline void IndexMapping::clear_indexoffset() {
  _impl_.indexoffset_ = 0;
}
inline double IndexMapping::_internal_indexoffset() const {
  return _impl_.indexoffset_;
}
inline double IndexMapping::indexoffset() const {
  // @@protoc_insertion_point(field_get:IndexMapping.indexOffset)
  return _internal_indexoffset();
}
inline void IndexMapping::_internal_set_indexoffset(double value) {
  
  _impl_.indexoffset_ = value;
}
inline void IndexMapping::set_indexoffset(double value) {
  _internal_set_indexoffset(value);
  // @@protoc_insertion_point(field_set:IndexMapping.indexOffset)
}

// .IndexMapping.Interpolation interpolation = 3;
inline void IndexMapping::clear_interpolation() {
  _impl_.interpolation_ = 0;
}
inline ::IndexMapping_Interpolation IndexMapping::_internal_interpolation() const {
  return static_cast< ::IndexMapping_Interpolation >(_impl_.interpolation_);
}
inline ::IndexMapping_Interpolation IndexMapping::interpolation() const {
  // @@protoc_insertion_point(field_get:IndexMapping.interpolation)
  return _internal_interpolation();
}
inline void IndexMapping::_internal_set_interpolation(::IndexMapping_Interpolation value) {
  
  _impl_.interpolation_ = value;
}
inline void IndexMapping::set_interpolation(::IndexMapping_Interpolation value) {
  _internal_set_interpolation(value);
  // @@protoc_insertion_point(field_set:IndexMapping.interpolation)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Store

// map<sint32, double> binCounts = 1;
inline int Store::_internal_bincounts_size() const {
  return _impl_.bincounts_.size();
}
inline int Store::bincounts_size() const {
  return _internal_bincounts_size();
}
inline void Store::clear_bincounts() {
  _impl_.bincounts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
Store::_internal_bincounts() const {
  return _impl_.bincounts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
Store::bincounts() const {
  // @@protoc_insertion_point(field_map:Store.binCounts)
  return _internal_bincounts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
Store::_internal_mutable_bincounts() {
  return _impl_.bincounts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
Store::mutable_bincounts() {
  // @@protoc_insertion_point(field_mutable_map:Store.binCounts)
  return _internal_mutable_bincounts();
}

// repeated double contiguousBinCounts = 2 [packed = true];
inline int Store::_internal_contiguousbincounts_size() const {
  return _impl_.contiguousbincounts_.size();
}
inline int Store::contiguousbincounts_size() const {
  return _internal_contiguousbincounts_size();
}
inline void Store::clear_contiguousbincounts() {
  _impl_.contiguousbincounts_.Clear();
}
inline double Store::_internal_contiguousbincounts(int index) const {
  return _impl_.contiguousbincounts_.Get(index);
}
inline double Store::contiguousbincounts(int index) const {
  // @@protoc_insertion_point(field_get:Store.contiguousBinCounts)
  return _internal_contiguousbincounts(index);
}
inline void Store::set_contiguousbincounts(int index, double value) {
  _impl_.contiguousbincounts_.Set(index, value);
  // @@protoc_insertion_point(field_set:Store.contiguousBinCounts)
}
inline void Store::_internal_add_contiguousbincounts(double value) {
  _impl_.contiguousbincounts_.Add(value);
}
inline void Store::add_contiguousbincounts(double value) {
  _internal_add_contiguousbincounts(value);
  // @@protoc_insertion_point(field_add:Store.contiguousBinCounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Store::_internal_contiguousbincounts() const {
  return _impl_.contiguousbincounts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Store::contiguousbincounts() const {
  // @@protoc_insertion_point(field_list:Store.contiguousBinCounts)
  return _internal_contiguousbincounts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Store::_internal_mutable_contiguousbincounts() {
  return &_impl_.contiguousbincounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Store::mutable_contiguousbincounts() {
  // @@protoc_insertion_point(field_mutable_list:Store.contiguousBinCounts)
  return _internal_mutable_contiguousbincounts();
}

// sint32 contiguousBinIndexOffset = 3;
inline void Store::clear_contiguousbinindexoffset() {
  _impl_.contiguousbinindexoffset_ = 0;
}
inline int32_t Store::_internal_contiguousbinindexoffset() const {
  return _impl_.contiguousbinindexoffset_;
}
inline int32_t Store::contiguousbinindexoffset() const {
  // @@protoc_insertion_point(field_get:Store.contiguousBinIndexOffset)
  return _internal_contiguousbinindexoffset();
}
inline void Store::_internal_set_contiguousbinindexoffset(int32_t value) {
  
  _impl_.contiguousbinindexoffset_ = value;
}
inline void Store::set_contiguousbinindexoffset(int32_t value) {
  _internal_set_contiguousbinindexoffset(value);
  // @@protoc_insertion_point(field_set:Store.contiguousBinIndexOffset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IndexMapping_Interpolation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IndexMapping_Interpolation>() {
  return ::IndexMapping_Interpolation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ddsketch_2eproto
